Problem 1
In diffie hellman values – G, g, g^x mod G, and g^y mod G – are sent in the clear. If the secret is created as g^x . g^y, then any attacker can create the resulting key g^x+y on his own. The scheme no longer remains secure. The most critical aspect of Diffie Hellmans security is the complexity of solving the discrete logarithm problem (DLP), which is to find x given g and g^x. By multiplying g^x and g^y to get the secret key we are making the protocol insecure.

Problem 2
Recover the password used to generate the second hash above. Hint: The password consists
only of numbers.
145219 is the password
2. Give a pseudocode description of your algorithm and the worst case running time for it.
n(for length 0 to n)*10(for each number 0 to 9)*n (For each position) =O(n square)

3. Discuss the merits of your colleague’s proposal. Suggest how your attack might be made
intractable.
Usage of sha 256, even after bday paradox it would take a lt of time to brute force. Cryptographic hash function.
Salt usage
Different salt usage
If the password complexity is increased then it would take years to bruteforce the passwrd
